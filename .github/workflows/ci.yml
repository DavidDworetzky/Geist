name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14.9
        env:
          POSTGRES_DB: geist
          POSTGRES_USER: geist
          POSTGRES_PASSWORD: geist
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3.1.1
      with:
        python-version: '3.11'
        activate-environment: geist-linux-docker
        environment-file: linux_environment_x86_x64.yml

    - name: Run tests
      shell: bash -l {0}
      env:
        HUGGING_FACE_HUB_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}
        PYTHONPATH: ${{ github.workspace }}
        DB_HOST: localhost
        DB_PORT: 5432
        POSTGRES_DB: geist
        POSTGRES_USER: geist
        POSTGRES_PASSWORD: geist
      run: |
        conda info
        conda list
        pytest tests/

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Backend
      run: docker build -t geist-backend -f Dockerfile .

    - name: Build Frontend
      run: docker build -t geist-frontend -f client/geist/Dockerfile .

    - name: Test Docker Compose
      run: |
        docker-compose up -d
        # Wait for db service to be ready
        echo "Waiting for database to be ready..."
        timeout 30s bash -c 'until docker-compose exec -T db pg_isready -h localhost; do sleep 1; done'
        # Show service status
        docker-compose ps
        # Show logs if needed for debugging
        docker-compose logs
        # Test endpoints
        curl -f http://localhost:5001/health || (docker-compose logs && exit 1)
        curl -f http://localhost:3000 || (docker-compose logs && exit 1)
        docker-compose down
